---
import type { ClientReturn } from '@sanity/client';
import { sanityClient as sanity } from 'sanity:client';
import { toPlainText } from '../../lib/portableTextSerializer.js';

// Import the templates for different campaign types
import AdvocatesTemplate from '../../components/templates/AdvocatesTemplate.astro';
import InvestorRepsTemplate from '../../components/templates/InvestorRepsTemplate.astro';
import MarketingTemplate from '../../components/templates/MarketingTemplate.astro';
import SustainersTemplate from '../../components/templates/SustainersTemplate.astro';
import ChurchTemplate from '../../components/templates/ChurchTemplate.astro';
import { campaignBySlug } from './campaignBySlug.groq';

// Map templates from Sanity to Astro components
const templateMap = {
  advocates: AdvocatesTemplate,
  investorReps: InvestorRepsTemplate,
  marketing: MarketingTemplate,
  sustainers: SustainersTemplate,
  church: ChurchTemplate,
};

interface Props {
  campaign?: ClientReturn<typeof campaignBySlug>;
}

const { slug } = Astro.params;
let { campaign } = Astro.props;

// Fetch campaign data if not provided via props
campaign ??= await sanity.fetch(campaignBySlug, { slug });

if (!campaign) {
  throw new Response(null, {
    status: 404,
    statusText: 'Not Found',
  });
}

console.log('Campaign data:', JSON.stringify(campaign, null, 2));
console.log('Fetched campaign templateType:', campaign.templateType);

// Determine which template to use
const TemplateComponent = templateMap[campaign.templateType] || MarketingTemplate;
const pageTitle = campaign.heading ? toPlainText(campaign.heading) : 'Campaign Page';
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="icon" href="/favicon.png" type="image/svg+xml" />
    <title>{pageTitle}</title>
  </head>
  <body>
    <section>
      {/* Render the template with campaign data */}
      {campaign && TemplateComponent && <TemplateComponent campaignData={campaign} />}

      {/* Display warning if template type is unknown */}
      {
        campaign && !templateMap[campaign.templateType] && (
          <div class="text-center py-10 text-orange-600">
            <p>Warning: Unknown template type '{campaign.templateType}'. Using default template.</p>
          </div>
        )
      }
    </section>
  </body>
</html>
