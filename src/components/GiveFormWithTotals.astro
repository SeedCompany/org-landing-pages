---
import { StripeClientIsland } from './stripe/StripeClientIsland';
import CampaignGivingInfo from './CampaignGivingInfo.astro';
const trailingSlash = (str: string) => (str.endsWith('/') ? str : str + '/');

interface WatermarkCampaignTotals {
  amount: number;
}

interface GraphQLResponse {
  data?: {
    watermarkCampaignTotals: WatermarkCampaignTotals;
  };
  errors?: Array<{ message: string }>;
}

const GQL_API = new URL('graphql', trailingSlash(import.meta.env.PUBLIC_API_URL));
const response = await fetch(GQL_API, {
  method: 'POST',
  headers: {
    'Content-Type': 'application/json',
    // Add authentication if needed, e.g.:
    // 'Authorization': `Bearer ${yourToken}`,
  },
  body: JSON.stringify({
    query: `
          query Query {
            watermarkCampaignTotals {
              amount
            }
          }
        `,
  }),
});
const data = (await response.json()) as GraphQLResponse;
if (data.errors) {
  console.error('GraphQL Errors:', data.errors);
  throw new Error('Failed to fetch watermark campaign totals');
}
const amount = data.data?.watermarkCampaignTotals.amount;
const campaignTotals = {
  totalRaised: typeof amount === 'number' ? amount : 0,
  goalAmount: 2000000,
};
---

<div class="form-card right-4 top-28 lg:fixed lg:right-8 lg:min-w-96 p-5 rounded-lg shadow-lg z-10">
  <StripeClientIsland
    formProps={{
      enableRecurring: true,
      hideInvestorType: 'Organization',
      presetAmounts: {
        oneTime: [35, 500, 2500, 10000, 20000],
        recurring: [25, 50, 100, 500, 1000],
      },
      campaignTotals: true,
      telemetry: { referrer: 'Watermark' },
    }}
    client:load
  >
    <CampaignGivingInfo campaignTotals={campaignTotals} slot="campaign-progress" />
  </StripeClientIsland>
</div>
<style></style>
