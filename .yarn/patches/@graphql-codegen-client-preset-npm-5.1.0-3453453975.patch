diff --git a/esm/babel.js b/esm/babel.js
index 85cab61d4b47efd79b55a0228684cdf4d5165bd2..ab448fdb46b35b22c70ba8b175f3ce624fc377bf 100644
--- a/esm/babel.js
+++ b/esm/babel.js
@@ -51,7 +51,7 @@ export default declare((api, opts) => {
         },
     };
 });
-function getRelativeImportPath(state, artifactDirectory, fileToRequire = 'graphql') {
+function getRelativeImportPath(state, artifactDirectory, fileToRequire = 'operations') {
     if (state.file == null) {
         throw new Error('Babel state is missing expected file name');
     }
diff --git a/esm/fragment-masking-plugin.js b/esm/fragment-masking-plugin.js
index 6628388b890cfc7d38f9e1f49064a05a352838d9..88b1ad286dcdfd8201db050a4d3f05603432b23f 100644
--- a/esm/fragment-masking-plugin.js
+++ b/esm/fragment-masking-plugin.js
@@ -110,7 +110,8 @@ export function isFragmentReady<TQuery, TFrag>(
  */
 export const plugin = (_, __, { useTypeImports, augmentedModuleName, unmaskFunctionName, emitLegacyCommonJSImports, isStringDocumentMode }, _info) => {
     const documentNodeImport = `${useTypeImports ? 'import type' : 'import'} { ResultOf, DocumentTypeDecoration${isStringDocumentMode ? '' : ', TypedDocumentNode'} } from '@graphql-typed-document-node/core';\n`;
-    const deferFragmentHelperImports = `${useTypeImports ? 'import type' : 'import'} { Incremental${isStringDocumentMode ? ', TypedDocumentString' : ''} } from './graphql${emitLegacyCommonJSImports ? '' : '.js'}';\n`;
+    const documentStringImports = isStringDocumentMode ? `${useTypeImports ? 'import type' : 'import'} { TypedDocumentString } from './operations${emitLegacyCommonJSImports ? '' : '.js'}';\n` : '';
+    const deferFragmentHelperImports = `${useTypeImports ? 'import type' : 'import'} { Incremental } from './schema${emitLegacyCommonJSImports ? '' : '.js'}';\n`;
     const fragmentDefinitionNodeImport = isStringDocumentMode
         ? ''
         : `${useTypeImports ? 'import type' : 'import'} { FragmentDefinitionNode } from 'graphql';\n`;
@@ -119,6 +120,7 @@ export const plugin = (_, __, { useTypeImports, augmentedModuleName, unmaskFunct
             documentNodeImport,
             fragmentDefinitionNodeImport,
             deferFragmentHelperImports,
+            documentStringImports,
             `\n`,
             fragmentTypeHelper,
             `\n`,
diff --git a/esm/index.js b/esm/index.js
index aab00406dd9cf95297e8bc678e999ee093489b3c..ef018fabf6d7c75ffeba61a263caf73f47583d50 100644
--- a/esm/index.js
+++ b/esm/index.js
@@ -111,9 +111,10 @@ export const preset = {
             return undefined;
         }
         const plugins = [
-            { [`add`]: { content: `/* eslint-disable */` } },
+            { [`add`]: { content: `import type * as Schema from './schema.ts';\n` } },
             {
                 [`typescript`]: {
+                    namespacedImportName: 'Schema',
                     inputMaybeValue: 'T | null | undefined',
                 },
             },
@@ -131,7 +132,7 @@ export const preset = {
             { [`gen-dts`]: { sourcesWithOperations } },
         ];
         const gqlArtifactFileExtension = '.ts';
-        reexports.push('gql');
+        reexports.push('graphql-fn-typed');
         const config = {
             ...options.config,
             inlineFragmentTypes: isMaskingFragments ? 'mask' : options.config['inlineFragmentTypes'],
@@ -189,7 +190,7 @@ export const preset = {
         }
         return [
             {
-                filename: `${options.baseOutputDir}graphql.ts`,
+                filename: `${options.baseOutputDir}operations.ts`,
                 plugins,
                 pluginMap,
                 schema: options.schema,
@@ -201,7 +202,7 @@ export const preset = {
                 documentTransforms: options.documentTransforms,
             },
             {
-                filename: `${options.baseOutputDir}gql${gqlArtifactFileExtension}`,
+                filename: `${options.baseOutputDir}graphql-fn-typed${gqlArtifactFileExtension}`,
                 plugins: genDtsPlugins,
                 pluginMap,
                 schema: options.schema,
